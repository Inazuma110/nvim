# background trance
[[plugins]]
repo = 'Inazuma110/air.vim'

[[plugins]]
repo = 'Shougo/dein.vim'

# win resize
[[plugins]]
repo = 'simeji/winresizer'
hook_add = '''
  " window resize
  let g:winresizer_vert_resize = 1
  let g:winresizer_horiz_resize = 1
'''

# project tree
[[plugins]]
repo = 'scrooloose/nerdtree'

# filetype
[[plugins]]
repo = 'Shougo/context_filetype.vim'

# git command
[[plugins]]
repo = 'tpope/vim-fugitive'

# git
[[plugins]]
repo = 'airblade/vim-gitgutter'
hook_add = '''
  let g:gitgutter_sign_added = '‚úö'
  let g:gitgutter_sign_modified = '‚ûú'
  let g:gitgutter_sign_removed = '‚úò'
'''

# file icons
[[plugins]]
repo = 'ryanoasis/vim-devicons'
hook_add = '''
  let g:WebDevIconsUnicodeDecorateFolderNodes = 1
  call denite#custom#source('file,file/rec,file/mru,file/old,file/point', 'converters', ['devicons_denite_converter'])
'''

# colorschema
[[plugins]]
repo = 'https://github.com/jacoborus/tender.vim'
hook_add = '''
  au ColorScheme * highlight LineNr ctermfg=10
  au VimEnter * nested colorscheme tender
'''

# () highlight
[[plugins]]
repo = 'luochen1990/rainbow'
hook_add = 'let g:rainbow_active = 1'

[[plugins]]
repo = 'tpope/vim-surround'

# commentout
[[plugins]]
repo = 'tyru/caw.vim'

# adjust align
[[plugins]]
repo = 'junegunn/vim-easy-align'
hook_add = '''
  xmap ga <Plug>(EasyAlign)
  nmap ga <Plug>(EasyAlign)
'''

# indent highlight
[[plugins]]
repo = 'git@github.com:Yggdroot/indentLine.git'
hook_add = '''
  let g:indentLine_char = '‚ñè'
  let g:indentLine_first_char = '‚ñè'
  " let g:indentLine_showFirstIndentLevel = -1
  autocmd Filetype markdown let g:indentLine_setConceal=0
  autocmd Filetype plaintex let g:indentLine_setConceal=0
'''

# execute script
[[plugins]]
repo = 'git@github.com:thinca/vim-quickrun.git'

# highlight command f
[[plugins]]
repo = 'git@github.com:deris/vim-shot-f.git'


# some plugins depend this
[[plugins]]
repo = 'git@github.com:kana/vim-operator-user.git'

# yank highlight
[[plugins]]
repo = 'git@github.com:haya14busa/vim-operator-flashy.git'
hook_add = '''
  map y <Plug>(operator-flashy)
  nmap Y <Plug>(operator-flashy)$
'''

# [[plugins]]
# repo = 'git@github.com:Shougo/defx.nvim.git'

# open browser from vim
[[plugins]]
repo = 'git@github.com:tyru/open-browser.vim.git'

# [[plugins]]
# repo = 'https://github.com/neoclide/coc.nvim'
# rev = 'release'
# hook_add = '''
#   " " if hidden is not set, TextEdit might fail.
#   " set hidden
#   "
#   " " Some servers have issues with backup files, see #649
#   " set nobackup
#   " set nowritebackup
#   "
#   " " Better display for messages
#   " set cmdheight=2
#   "
#   " " You will have bad experience for diagnostic messages when it's default 4000.
#   " " set updatetime=300
#   "
#   " " don't give |ins-completion-menu| messages.
#   " set shortmess+=c
#   "
#   " " always show signcolumns
#   " set signcolumn=yes
#   "
#   " inoremap <silent><expr> <TAB>
#   "      \ pumvisible() ? "\<C-n>" :
#   "      \ <SID>check_back_space() ? "\<TAB>" :
#   "      \ coc#refresh()
#   " inoremap <expr><S-TAB> pumvisible() ? "\<C-p>" : "\<C-h>"
#   "
#   " function! s:check_back_space() abort
#   "   let col = col('.') - 1
#   "   return !col || getline('.')[col - 1]  =~# '\s'
#   " endfunction
#   "
#   " Use <C-l> for trigger snippet expand.
#   " imap <C-k> <Plug>(coc-snippets-expand)
#
#   " inoremap <silent><expr> <TAB>
#   "      \ pumvisible() ? coc#_select_confirm() :
#   "      \ coc#expandableOrJumpable() ? "\<C-r>=coc#rpc#request('doKeymap', ['snippets-expand-jump',''])\<CR>" :
#   "      \ <SID>check_back_space() ? "\<TAB>" :
#   "      \ coc#refresh()
#   "
#   " function! s:check_back_space() abort
#   "   let col = col('.') - 1
#   "   return !col || getline('.')[col - 1]  =~# '\s'
#   " endfunction
#   "
#   " let g:coc_snippet_next = '<tab>'
#   "
#   " " Use <C-l> for trigger snippet expand.
#   " " imap <C-k> <Plug>(coc-snippets-expand)
#   "
#   " " Use <C-j> for select text for visual placeholder of snippet.
#   " " vmap <C-j> <Plug>(coc-snippets-select)
#   "
#   " " Use <C-j> for jump to next placeholder, it's default of coc.nvim
#   " " let g:coc_snippet_next = '<c-j>'
#   "
#   " " Use <C-k> for jump to previous placeholder, it's default of coc.nvim
#   " " let g:coc_snippet_prev = '<c-k>'
#   "
#   " " Use <C-j> for both expand and jump (make expand higher priority.)
#   " " imap <C-j> <Plug>(coc-snippets-expand-jump)
#   "
#   " " Remap keys for gotos
#   " nmap <silent> gd <Plug>(coc-definition)
#   " nmap <silent> gy <Plug>(coc-type-definition)
#   " nmap <silent> gi <Plug>(coc-implementation)
#   " nmap <silent> gr <Plug>(coc-references)
#   "
#   " " Use K to show documentation in preview window
#   " nnoremap <silent> K :call <SID>show_documentation()<CR>
#   "
#   " function! s:show_documentation()
#   "   if (index(['vim','help'], &filetype) >= 0)
#   "     execute 'h '.expand('<cword>')
#   "   else
#   "     call CocAction('doHover')
#   "   endif
#   " endfunction
#   "
#   " " Highlight symbol under cursor on CursorHold
#   " autocmd CursorHold * silent call CocActionAsync('highlight')
#   "
#   " " Remap for rename current word
#   " nmap <leader>rn <Plug>(coc-rename)
#   "
#   " " Remap for format selected region
#   " xmap <leader>f  <Plug>(coc-format-selected)
#   " nmap <leader>f  <Plug>(coc-format-selected)
#   "
#   " augroup mygroup
#   "   autocmd!
#   "   " Setup formatexpr specified filetype(s).
#   "   autocmd FileType typescript,json setl formatexpr=CocAction('formatSelected')
#   "   " Update signature help on jump placeholder
#   "   autocmd User CocJumpPlaceholder call CocActionAsync('showSignatureHelp')
#   " augroup end
#   "
#   " " Remap for do codeAction of selected region, ex: `<leader>aap` for current paragraph
#   " xmap <leader>a  <Plug>(coc-codeaction-selected)
#   " nmap <leader>a  <Plug>(coc-codeaction-selected)
#   "
#   " " Remap for do codeAction of current line
#   " nmap <leader>ac  <Plug>(coc-codeaction)
#   " " Fix autofix problem of current line
#   " nmap <leader>qf  <Plug>(coc-fix-current)
#   "
#   " " Create mappings for function text object, requires document symbols feature of languageserver.
#   " xmap if <Plug>(coc-funcobj-i)
#   " xmap af <Plug>(coc-funcobj-a)
#   " omap if <Plug>(coc-funcobj-i)
#   " omap af <Plug>(coc-funcobj-a)
#   "
#   " " Use <TAB> for select selections ranges, needs server support, like: coc-tsserver, coc-python
#   " nmap <silent> <TAB> <Plug>(coc-range-select)
#   " xmap <silent> <TAB> <Plug>(coc-range-select)
#   "
#   " " Use `:Format` to format current buffer
#   " command! -nargs=0 Format :call CocAction('format')
#   "
#   " " Use `:Fold` to fold current buffer
#   " command! -nargs=? Fold :call     CocAction('fold', <f-args>)
#   "
#   " " use `:OR` for organize import of current buffer
#   " command! -nargs=0 OR   :call     CocAction('runCommand', 'editor.action.organizeImport')
#   "
#   " " Add status line support, for integration with other plugin, checkout `:h coc-status`
#   " set statusline^=%{coc#status()}%{get(b:,'coc_current_function','')}
#   "
#   " " Using CocList
#   " " Show all diagnostics
#   " nnoremap <silent> <space>a  :<C-u>CocList diagnostics<cr>
#   " " Manage extensions
#   " nnoremap <silent> <space>e  :<C-u>CocList extensions<cr>
#   " " Show commands
#   " nnoremap <silent> <space>c  :<C-u>CocList commands<cr>
#   " " Find symbol of current document
#   " nnoremap <silent> <space>o  :<C-u>CocList outline<cr>
#   " " Search workspace symbols
#   " nnoremap <silent> <space>s  :<C-u>CocList -I symbols<cr>
#   " " Do default action for next item.
#   " nnoremap <silent> <space>j  :<C-u>CocNext<CR>
#   " " Do default action for previous item.
#   " nnoremap <silent> <space>k  :<C-u>CocPrev<CR>
#   " " Resume latest coc list
#   " nnoremap <silent> <space>p  :<C-u>CocListResume<CR>
# '''


# lsp
[[plugins]]
repo = 'autozimu/LanguageClient-neovim'
build = 'bash install.sh'
rev = 'next'
hook_add = '''
    " set completefunc=LanguageClient#complete
    let s:node = empty($XDG_CONFIG_HOME) ? expand('$HOME/.config') : $XDG_CONFIG_HOME
    let s:julia_exe = '/usr/local/bin/julia'
    let s:julia_lsp_script = expand('~') . '/.config/nvim/plugins/normal/startlsp.jl'

    let g:LanguageClient_serverCommands = {
        \ 'c': ['clangd', '-compile-commands-dir=' . getcwd() . '/build'],
        "\ 'cpp': ['clangd', '-compile-commands-dir=' . getcwd() . '/build'],
        \ 'cpp': ['clangd', '--header-insertion=never'],
        \ 'python': ['pyls'],
        "\ 'java': ['/usr/local/bin/jdtls', '-data', getcwd()]
        \ 'java': ['/home/inazuma/java-language-server/dist/lang_server_linux.sh'],
        \ 'julia': [s:julia_exe, '--startup-file=no', s:julia_lsp_script],
    \ }

    " not stop completion $ & /
    set hidden
    set signcolumn=yes
    let g:LanguageClient_hoverPreview = "Never"

    nnoremap <F5> :call LanguageClient_contextMenu()<CR>
    " Or map each action separately
    nnoremap <silent> K :call LanguageClient#textDocument_hover()<CR>
    nnoremap <silent> gd :call LanguageClient#textDocument_definition()<CR>
    nnoremap <silent> <F2> :call LanguageClient#textDocument_rename()<CR>
    command! LSPFormat :call LanguageClient#textDocument_formatting()

    let g:LanguageClient_diagnosticsDisplay = {
     \   1:{
     \         "name": "Error",
     \         "texthl": "ALEError",
     \         "signText": "üí©",
     \         "signTexthl": "ALEErrorSign",
     \         "virtualTexthl": "Error",
     \     },
    \ }
'''

# [[plugins]]
# repo = 'prabirshrestha/async.vim'
#
# [[plugins]]
# repo = 'https://github.com/prabirshrestha/vim-lsp'
# hook_add = '''
#   if executable('pyls')
#       " pip install python-language-server
#       au User lsp_setup call lsp#register_server({
#          \ 'name': 'pyls',
#          \ 'cmd': {server_info->['pyls']},
#          \ 'whitelist': ['python'],
#          \ })
#   endif
#   if executable('clangd')
#       au User lsp_setup call lsp#register_server({
#          \ 'name': 'clangd',
#          \ 'cmd': {server_info->['clangd']},
#          \ 'whitelist': ['cpp'],
#          \ })
#   endif
# '''



# [[plugins]]
# repo = 'https://github.com/kusabashira/vim-nicomment.git'
# hook_add = '''
#   " It generates claps
#   let g:nicomment_comment_generator = {}
#   function! g:nicomment_comment_generator.generate()
#     if !has_key(self, 'rand')
#       " It requires vital.vim
#       let V = vital#of('vital')
#       let Xor128 = V.import('Random.Xor128')
#       let self.rand = Xor128.new_generator()
#     endif
#
#     if abs(self.rand.next() % 10) == 0
#       return repeat('8', abs(self.rand.next() % 20) + 4)
#     else
#       return v:null
#     endif
#   endfunction
# '''


[[plugins]]
repo = 'https://github.com/willelz/badapple.nvim.git'


[[plugins]]
repo = 'https://github.com/glacambre/firenvim.git'
hook_post_update = '''
  call firenvim#install(0)
'''
hook_add = '''
  set guifont=Hack\ Nerd\ Font\ Regular
  let g:firenvim_config = {
     \ 'localSettings': {
         \ '.*': {
             \ 'selector': '',
             \ 'priority': 0,
         \ },
         "\ 'tweetdeck\.twitter\.com': {
         "    \ 'selector': '',
         "    \ 'priority': 1,
         "\ },
         \ 'google\.com': {
             \ 'selector': '',
             \ 'priority': 1,
         \ },
         \ 'atcoder\.jp': {
             \ 'selector': '',
             \ 'priority': 1,
         \ },
         \ 'localhost:': {
             \ 'selector': '',
             \ 'priority': 1,
         \ },
     \ }
  \ }
  function! OnUIEnter(event)
      let l:ui = nvim_get_chan_info(a:event.chan)
      if has_key(l:ui, 'client') && has_key(l:ui.client, "name")
          if l:ui.client.name == "Firenvim"
              set laststatus=0
              set nonumber
              set norelativenumber
          endif
      endif
  endfunction
  autocmd UIEnter * call OnUIEnter(deepcopy(v:event))

  au BufEnter github.com_*.txt set filetype=markdown
  au BufEnter qiita.com_*.txt set filetype=markdown
  au BufEnter *notebooks*.txt set filetype=python
  au BufEnter factory.quantx.io*.txt set filetype=python

  let g:dont_write = v:false
  function! My_Write(timer) abort
    let g:dont_write = v:false
    write
  endfunction

  function! Delay_My_Write() abort
    if g:dont_write
      return
    end
    let g:dont_write = v:true
    call timer_start(10000, 'My_Write')
  endfunction

  " au TextChanged * ++nested call Delay_My_Write()
  " au TextChangedI * ++nested call Delay_My_Write()
'''


# [[plugins]]
# repo = 'osyo-manga/vim-over'
# hook_add = '''
#   " „Ç´„Éº„ÇΩ„É´‰∏ã„ÅÆÂçòË™û„Çí„Éè„Ç§„É©„Ç§„Éà‰ªò„Åç„ÅßÁΩÆÊèõ
#   nnoremap sub :OverCommandLine<CR>%s/<C-r><C-w>//g<Left><Left>
#
#   " „Ç≥„Éî„Éº„Åó„ÅüÊñáÂ≠óÂàó„Çí„Éè„Ç§„É©„Ç§„Éà‰ªò„Åç„ÅßÁΩÆÊèõ
#   nnoremap subp y:OverCommandLine<CR>%s!<C-r>=substitute(@0, '!', '\\!', 'g')<CR>!!gI<Left><Left><Left>
# '''

[[plugins]]
repo = 'https://github.com/itchyny/calendar.vim'
hook_add = '''
  let g:calendar_google_calendar = 1
'''

# [[plugins]]
# repo = 'https://github.com/itchyny/vim-cursorword'

# [[plugins]]
# repo = 'https://github.com/rbtnn/game_engine.vim'
#
# [[plugins]]
# repo = 'https://github.com/rbtnn/mario.vim'
#
# [[plugins]]
# repo = 'https://github.com/rbtnn/puyo.vim'

# [[plugins]]
# repo = 'https://github.com/johngrib/vim-game-code-break'

# [[plugins]]
# repo = 'https://github.com/vim/killersheep'


[[plugins]]
repo = '~/.cache/dein/repos/github.com/Inazuma110/ushitapunikiakun.vim'
hook_add = '''
  " let g:ushitapunikiakun#insert_str = 'üêÆ'
'''

# [[plugins]]
# repo = 'Inazuma110/disarrow.vim'

[[plugins]]
repo = 'https://github.com/andymass/vim-matchup'

[[plugins]]
repo = 'vim-jp/vimdoc-ja'

[[plugins]]
repo = 'https://github.com/JuliaEditorSupport/julia-vim'


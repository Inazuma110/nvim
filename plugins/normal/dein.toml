# background trance
[[plugins]]
repo = 'Inazuma110/air.vim'

[[plugins]]
repo = 'Shougo/dein.vim'

# win resize
[[plugins]]
repo = 'simeji/winresizer'
hook_add = '''
  " window resize
  let g:winresizer_vert_resize = 1
  let g:winresizer_horiz_resize = 1
'''

# project tree
[[plugins]]
repo = 'scrooloose/nerdtree'

# filetype
[[plugins]]
repo = 'Shougo/context_filetype.vim'

# git command
[[plugins]]
repo = 'tpope/vim-fugitive'

# git
[[plugins]]
repo = 'airblade/vim-gitgutter'
hook_add = '''
  let g:gitgutter_sign_added = '‚úö'
  let g:gitgutter_sign_modified = '‚ûú'
  let g:gitgutter_sign_removed = '‚úò'
'''

# file icons
[[plugins]]
repo = 'ryanoasis/vim-devicons'
hook_add = '''
  let g:WebDevIconsUnicodeDecorateFolderNodes = 1
  call denite#custom#source('file,file/rec,file/mru,file/old,file/point', 'converters', ['devicons_denite_converter'])
'''

# colorschema
[[plugins]]
repo = 'https://github.com/jacoborus/tender.vim'
hook_add = '''
  au ColorScheme * highlight LineNr ctermfg=10
  au VimEnter * nested colorscheme tender
'''

# () highlight
[[plugins]]
repo = 'luochen1990/rainbow'
hook_add = 'let g:rainbow_active = 1'

[[plugins]]
repo = 'tpope/vim-surround'

# commentout
[[plugins]]
repo = 'tyru/caw.vim'

# adjust align
[[plugins]]
repo = 'junegunn/vim-easy-align'
hook_add = '''
  xmap ga <Plug>(EasyAlign)
  nmap ga <Plug>(EasyAlign)
'''

# indent highlight
[[plugins]]
repo = 'git@github.com:Yggdroot/indentLine.git'
hook_add = '''
  let g:indentLine_char = '‚ñè'
  let g:indentLine_first_char = '‚ñè'
  " let g:indentLine_showFirstIndentLevel = -1
  autocmd Filetype markdown let g:indentLine_setConceal=0
  autocmd Filetype plaintex let g:indentLine_setConceal=0
'''

# execute script
[[plugins]]
repo = 'git@github.com:thinca/vim-quickrun.git'

# highlight command f
[[plugins]]
repo = 'git@github.com:deris/vim-shot-f.git'


# some plugins depend this
[[plugins]]
repo = 'git@github.com:kana/vim-operator-user.git'

# yank highlight
[[plugins]]
repo = 'git@github.com:haya14busa/vim-operator-flashy.git'
hook_add = '''
  map y <Plug>(operator-flashy)
  nmap Y <Plug>(operator-flashy)$
'''

# open browser from vim
[[plugins]]
repo = 'git@github.com:tyru/open-browser.vim.git'



# lsp
# [[plugins]]
# repo = 'autozimu/LanguageClient-neovim'
# build = 'bash install.sh'
# rev = 'next'
# hook_add = '''
#     " set completefunc=LanguageClient#complete
#     let s:node = empty($XDG_CONFIG_HOME) ? expand('$HOME/.config') : $XDG_CONFIG_HOME
#     let s:julia_exe = '/usr/local/bin/julia'
#     let s:julia_lsp_script = expand('~') . '/.config/nvim/plugins/normal/startlsp.jl'
#
#     let g:LanguageClient_serverCommands = {
#        \ 'c': ['clangd', '-compile-commands-dir=' . getcwd() . '/build'],
#         "\ 'cpp': ['clangd', '-compile-commands-dir=' . getcwd() . '/build'],
#        \ 'cpp': ['clangd', '--header-insertion=never'],
#        \ 'python': ['pyls'],
#         "\ 'java': ['/usr/local/bin/jdtls', '-data', getcwd()]
#        \ 'java': ['/home/inazuma/java-language-server/dist/lang_server_linux.sh'],
#        \ 'julia': [s:julia_exe, '--startup-file=no', s:julia_lsp_script],
#    \ }
#
#     " not stop completion $ & /
#     set hidden
#     set signcolumn=yes
#     let g:LanguageClient_hoverPreview = "Never"
#
#     nnoremap <F5> :call LanguageClient_contextMenu()<CR>
#     " Or map each action separately
#     nnoremap <silent> K :call LanguageClient#textDocument_hover()<CR>
#     nnoremap <silent> gd :call LanguageClient#textDocument_definition()<CR>
#     nnoremap <silent> <F2> :call LanguageClient#textDocument_rename()<CR>
#     command! LSPFormat :call LanguageClient#textDocument_formatting()
#
#     let g:LanguageClient_diagnosticsDisplay = {
#     \   1:{
#     \         "name": "Error",
#     \         "texthl": "ALEError",
#     \         "signText": "üí©",
#     \         "signTexthl": "ALEErrorSign",
#     \         "virtualTexthl": "Error",
#     \     },
#    \ }
# '''

# [[plugins]]
# repo = 'https://github.com/kusabashira/vim-nicomment.git'
# hook_add = '''
#   " It generates claps
#   let g:nicomment_comment_generator = {}
#   function! g:nicomment_comment_generator.generate()
#     if !has_key(self, 'rand')
#       " It requires vital.vim
#       let V = vital#of('vital')
#       let Xor128 = V.import('Random.Xor128')
#       let self.rand = Xor128.new_generator()
#     endif
#
#     if abs(self.rand.next() % 10) == 0
#       return repeat('8', abs(self.rand.next() % 20) + 4)
#     else
#       return v:null
#     endif
#   endfunction
# '''


[[plugins]]
repo = 'https://github.com/willelz/badapple.nvim.git'


[[plugins]]
repo = 'https://github.com/glacambre/firenvim.git'
hook_post_update = '''
  call firenvim#install(0)
'''
hook_add = '''
  set guifont=Hack\ Nerd\ Font\ Regular
  let g:firenvim_config = {
     \ 'localSettings': {
         \ '.*': {
             \ 'selector': '',
             \ 'priority': 0,
         \ },
         "\ 'tweetdeck\.twitter\.com': {
         "    \ 'selector': '',
         "    \ 'priority': 1,
         "\ },
         \ 'google\.com': {
             \ 'selector': '',
             \ 'priority': 1,
         \ },
         \ 'atcoder\.jp': {
             \ 'selector': '',
             \ 'priority': 1,
         \ },
         \ 'localhost:': {
             \ 'selector': '',
             \ 'priority': 1,
         \ },
     \ }
  \ }
  function! OnUIEnter(event)
      let l:ui = nvim_get_chan_info(a:event.chan)
      if has_key(l:ui, 'client') && has_key(l:ui.client, "name")
          if l:ui.client.name == "Firenvim"
              set laststatus=0
              set nonumber
              set norelativenumber
          endif
      endif
  endfunction
  autocmd UIEnter * call OnUIEnter(deepcopy(v:event))

  au BufEnter overleaf*.txt set filetype=tex
  au BufEnter *.txt set filetype=markdown
  au BufEnter factory.quantx.io*.txt set filetype=python

  let g:dont_write = v:false
  function! My_Write(timer) abort
    let g:dont_write = v:false
    write
  endfunction

  function! Delay_My_Write() abort
    if g:dont_write
      return
    end
    let g:dont_write = v:true
    call timer_start(10000, 'My_Write')
  endfunction

  " au TextChanged * ++nested call Delay_My_Write()
  " au TextChangedI * ++nested call Delay_My_Write()
'''


# [[plugins]]
# repo = 'osyo-manga/vim-over'
# hook_add = '''
#   " „Ç´„Éº„ÇΩ„É´‰∏ã„ÅÆÂçòË™û„Çí„Éè„Ç§„É©„Ç§„Éà‰ªò„Åç„ÅßÁΩÆÊèõ
#   nnoremap sub :OverCommandLine<CR>%s/<C-r><C-w>//g<Left><Left>
#
#   " „Ç≥„Éî„Éº„Åó„ÅüÊñáÂ≠óÂàó„Çí„Éè„Ç§„É©„Ç§„Éà‰ªò„Åç„ÅßÁΩÆÊèõ
#   nnoremap subp y:OverCommandLine<CR>%s!<C-r>=substitute(@0, '!', '\\!', 'g')<CR>!!gI<Left><Left><Left>
# '''

[[plugins]]
repo = 'https://github.com/itchyny/calendar.vim'
hook_add = '''
  let g:calendar_google_calendar = 1
'''

# [[plugins]]
# repo = 'https://github.com/itchyny/vim-cursorword'

# [[plugins]]
# repo = 'https://github.com/rbtnn/game_engine.vim'
#
# [[plugins]]
# repo = 'https://github.com/rbtnn/mario.vim'
#
# [[plugins]]
# repo = 'https://github.com/rbtnn/puyo.vim'

# [[plugins]]
# repo = 'https://github.com/johngrib/vim-game-code-break'


[[plugins]]
repo = 'Inazuma110/ushitapunikiakun.vim'
hook_add = '''
  " let g:ushitapunikiakun#insert_str = 'üêÆ'
'''

# [[plugins]]
# repo = 'Inazuma110/disarrow.vim'

[[plugins]]
repo = 'https://github.com/andymass/vim-matchup'

[[plugins]]
repo = 'vim-jp/vimdoc-ja'

# [[plugins]]
# repo = 'https://github.com/JuliaEditorSupport/julia-vim'

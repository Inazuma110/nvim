# package manager
[[plugins]]
repo = 'Shougo/dein.vim'

# background trance
[[plugins]]
repo = 'Inazuma110/air.vim'

# lint
# [[plugins]]
# repo = 'w0rp/ale'

# win resize
[[plugins]]
repo = 'simeji/winresizer'
hook_add = '''
  " window resize
  let g:winresizer_vert_resize = 1
  let g:winresizer_horiz_resize = 1
'''
# toml highlight
[[plugins]]
repo = 'cespare/vim-toml'


# project tree
[[plugins]]
repo = 'scrooloose/nerdtree'

# filetype
[[plugins]]
repo = 'Shougo/context_filetype.vim'

[[plugins]]
repo = 'Shougo/vimfiler.vim'

# git
[[plugins]]
repo = 'tpope/vim-fugitive'

# git
[[plugins]]
repo = 'airblade/vim-gitgutter'
hook_add = '''
  let g:gitgutter_sign_added = '✚'
  let g:gitgutter_sign_modified = '➜'
  let g:gitgutter_sign_removed = '✘'
'''

# file icons
[[plugins]]
repo = 'ryanoasis/vim-devicons'
hook_add = 'let g:WebDevIconsUnicodeDecorateFolderNodes = 1'


[[plugins]]
repo = 'easymotion/vim-easymotion'


[[plugins]]
repo = 'vim-scripts/fcitx.vim'

# colorschema
[[plugins]]
repo =  'git@github.com:jacoborus/tender.vim.git'
hook_add = '''
  au ColorScheme * highlight LineNr ctermfg=10
  au VimEnter * nested colorscheme tender
'''

# () highlight
[[plugins]]
repo = 'luochen1990/rainbow'
hook_add = 'let g:rainbow_active = 1'

[[plugins]]
repo = 'tpope/vim-surround'

# commentout
[[plugins]]
repo = 'tyru/caw.vim'

[[plugins]]
repo = 'junegunn/vim-easy-align'
hook_add = '''
  xmap ga <Plug>(EasyAlign)
  nmap ga <Plug>(EasyAlign)
'''

# indent highlight
[[plugins]]
repo = 'git@github.com:Yggdroot/indentLine.git'
hook_add = '''
  let g:indentLine_char = '▏'
  let g:indentLine_first_char = '▏'
  " let g:indentLine_showFirstIndentLevel = -1
'''

# execute script
[[plugins]]
repo = 'git@github.com:thinca/vim-quickrun.git'

# highlight command f
[[plugins]]
repo = 'git@github.com:deris/vim-shot-f.git'


[[plugins]]
repo = 'git@github.com:kana/vim-operator-user.git'

# yank highlight
[[plugins]]
repo = 'git@github.com:haya14busa/vim-operator-flashy.git'
hook_add = '''
  map y <Plug>(operator-flashy)
  nmap Y <Plug>(operator-flashy)$
'''

# syntax highlight json
[[plugins]]
repo =  'elzr/vim-json'
hook_add = '''
  let g:vim_json_syntax_conceal = 0
'''

# [[plugins]]
# repo = 'git@github.com:Shougo/defx.nvim.git'

# open browser from vim
[[plugins]]
repo = 'git@github.com:tyru/open-browser.vim.git'

# presen
[[plugins]]
repo = 'git@github.com:thinca/vim-showtime.git'
hook_add = '''
  function! s:MyShowtimeStart() abort
    ShowtimeStart
    IndentLinesDisable
  endfunction

  command! InazumaShowtimeStart call s:MyShowtimeStart()
'''

[[plugins]]
repo = 'git@github.com:majutsushi/tagbar.git'

# lsp
[[plugins]]
repo = 'autozimu/LanguageClient-neovim'
build = 'bash install.sh'
rev = 'next'
hook_add = '''
    " set completefunc=LanguageClient#complete
    let s:node = empty($XDG_CONFIG_HOME) ? expand('$HOME/.config') : $XDG_CONFIG_HOME
    let g:LanguageClient_serverCommands = {
        \ 'c': ['clangd', '-compile-commands-dir=' . getcwd() . '/build'],
        "\ 'cpp': ['clangd', '-compile-commands-dir=' . getcwd() . '/build'],
        \ 'cpp': ['clangd'],
        \ 'python': ['pyls'],
    \ }
    " not stop completion $ & /
    set hidden
    set signcolumn=yes
    let g:LanguageClient_hoverPreview = "Never"
    nnoremap <F5> :call LanguageClient_contextMenu()<CR>
    " Or map each action separately
    nnoremap <silent> K :call LanguageClient#textDocument_hover()<CR>
    nnoremap <silent> gd :call LanguageClient#textDocument_definition()<CR>
    nnoremap <silent> <F2> :call LanguageClient#textDocument_rename()<CR>
    command! LSPFormat :call LanguageClient#textDocument_formatting()
'''

# nyancat
# [[plugins]]
# repo = 'git@github.com:mattn/vim-nyancat.git'

[[plugins]]
repo = 'https://github.com/Shougo/denite.nvim'
hook_add = '''
  " Define mappings
  autocmd FileType denite call s:denite_my_settings()
  function! s:denite_my_settings() abort
    nnoremap <silent><buffer><expr> <CR>
    \ denite#do_map('do_action')
    nnoremap <silent><buffer><expr> d
    \ denite#do_map('do_action', 'delete')
    nnoremap <silent><buffer><expr> p
    \ denite#do_map('do_action', 'preview')
    nnoremap <silent><buffer><expr> q
    \ denite#do_map('quit')
    nnoremap <silent><buffer><expr> i
    \ denite#do_map('open_filter_buffer')
    nnoremap <silent><buffer><expr> <Space>
    \ denite#do_map('toggle_select').'j'
    nnoremap <silent><buffer><expr> <C-h>
    \ denite#do_map('move_up_path')
  endfunction

  " Change file/rec command.
  call denite#custom#var('file/rec', 'command',
  \ ['ag', '--follow', '--nocolor', '--nogroup', '-g', ''])
  " For ripgrep
  " Note: It is slower than ag
  call denite#custom#var('file/rec', 'command',
  \ ['rg', '--files', '--glob', '!.git'])
  " For Pt(the platinum searcher)
  " NOTE: It also supports windows.
  call denite#custom#var('file/rec', 'command',
  \ ['pt', '--follow', '--nocolor', '--nogroup',
  \  (has('win32') ? '-g:' : '-g='), ''])
  " For python script scantree.py
  " Read bellow on this file to learn more about scantree.py
  call denite#custom#var('file/rec', 'command', ['scantree.py'])

  " Change matchers.
  call denite#custom#source(
  \ 'file_mru', 'matchers', ['matcher/fuzzy', 'matcher/project_files'])
  call denite#custom#source(
  \ 'file/rec', 'matchers', ['matcher/cpsm'])

  " Change sorters.
  call denite#custom#source(
  \ 'file/rec', 'sorters', ['sorter/sublime'])

  " Add custom menus
  let s:menus = {}

  let s:menus.zsh = {
  	\ 'description': 'Edit your import zsh configuration'
  	\ }
  let s:menus.zsh.file_candidates = [
  	\ ['zshrc', '~/.zshrc'],
  	\ ['zshenv', '~/.zshenv'],
  	\ ]

  let s:menus.my_commands = {
  	\ 'description': 'Example commands'
  	\ }
  let s:menus.my_commands.command_candidates = [
  	\ ['Split the window', 'vnew'],
  	\ ['Open zsh menu', 'Denite menu:zsh'],
  	\ ['Format code', 'FormatCode', 'go,python'],
  	\ ]

  call denite#custom#var('menu', 'menus', s:menus)

  " Ag command on grep source
  call denite#custom#var('grep', 'command', ['ag'])
  call denite#custom#var('grep', 'default_opts',
  		\ ['-i', '--vimgrep'])
  call denite#custom#var('grep', 'recursive_opts', [])
  call denite#custom#var('grep', 'pattern_opt', [])
  call denite#custom#var('grep', 'separator', ['--'])
  call denite#custom#var('grep', 'final_opts', [])

  " Ack command on grep source
  call denite#custom#var('grep', 'command', ['ack'])
  call denite#custom#var('grep', 'default_opts',
                  \ ['--ackrc', $HOME.'/.ackrc', '-H', '-i',
  		\  '--nopager', '--nocolor', '--nogroup', '--column'])
  call denite#custom#var('grep', 'recursive_opts', [])
  call denite#custom#var('grep', 'pattern_opt', ['--match'])
  call denite#custom#var('grep', 'separator', ['--'])
  call denite#custom#var('grep', 'final_opts', [])

  " Ripgrep command on grep source
  call denite#custom#var('grep', 'command', ['rg'])
  call denite#custom#var('grep', 'default_opts',
  		\ ['-i', '--vimgrep', '--no-heading'])
  call denite#custom#var('grep', 'recursive_opts', [])
  call denite#custom#var('grep', 'pattern_opt', ['--regexp'])
  call denite#custom#var('grep', 'separator', ['--'])
  call denite#custom#var('grep', 'final_opts', [])

  " Pt command on grep source
  call denite#custom#var('grep', 'command', ['pt'])
  call denite#custom#var('grep', 'default_opts',
  		\ ['-i', '--nogroup', '--nocolor', '--smart-case'])
  call denite#custom#var('grep', 'recursive_opts', [])
  call denite#custom#var('grep', 'pattern_opt', [])
  call denite#custom#var('grep', 'separator', ['--'])
  call denite#custom#var('grep', 'final_opts', [])

  " jvgrep command on grep source
  call denite#custom#var('grep', 'command', ['jvgrep'])
  call denite#custom#var('grep', 'default_opts', ['-i'])
  call denite#custom#var('grep', 'recursive_opts', ['-R'])
  call denite#custom#var('grep', 'pattern_opt', [])
  call denite#custom#var('grep', 'separator', [])
  call denite#custom#var('grep', 'final_opts', [])

  " Specify multiple paths in grep source
  "call denite#start([{'name': 'grep',
  "      \ 'args': [['a.vim', 'b.vim'], '', 'pattern']}])

  " Define alias
  call denite#custom#alias('source', 'file/rec/git', 'file/rec')
  call denite#custom#var('file/rec/git', 'command',
        \ ['git', 'ls-files', '-co', '--exclude-standard'])

  call denite#custom#alias('source', 'file/rec/py', 'file/rec')
  call denite#custom#var('file/rec/py', 'command',['scantree.py'])

  " Change ignore_globs
  call denite#custom#filter('matcher/ignore_globs', 'ignore_globs',
        \ [ '.git/', '.ropeproject/', '__pycache__/',
        \   'venv/', 'images/', '*.min.*', 'img/', 'fonts/'])

  " Custom action
  " Note: lambda function is not supported in Vim8.
  call denite#custom#action('file', 'test',
        \ {context -> execute('let g:foo = 1')})
  call denite#custom#action('file', 'test2',
        \ {context -> denite#do_action(
        \  context, 'open', context['targets'])})
  <
'''
